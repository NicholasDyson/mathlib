/-
Copyright (c) 2021 Alex Kontorovich and Heather Macbeth and Marc Masdeu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth, Marc Masdeu
-/
import analysis.complex.upper_half_plane

/-!
# The action of the modular group SL(2, ‚Ñ§) on the upper half-plane

  We define the action of `SL(2,‚Ñ§)` on `‚Ñç` (via restriction of the `SL(2,‚Ñù)` action in
  `analysis.complex.upper_half_plane`). We then define the standard fundamental domain
  (`modular_group.fundamental_domain`, `ùíü`) for this action and show
  (`modular_group.exists_smul_mem_fundamental_domain`) that any point in `‚Ñç` can be
  moved inside `ùíü`.

  Standard proofs make use of the identity

  `g ‚Ä¢ z = a / c - 1 / (c (cz + d))`

  for `g = [[a, b], [c, d]]` in `SL(2)`, but this requires separate handling of whether `c = 0`.
  Instead, our proof makes use of the following perhaps novel identity (see
  `modular_group.smul_eq_acbd_add`):

  `g ‚Ä¢ z = (a c + b d) / (c^2 + d^2) + (d z - c) / ((c^2 + d^2) (c z + d))`

  where there is no issue of division by zero.

  Another feature is that we delay until the very end the consideration of special matrices
  `T=[[1,1],[0,1]]` (see `modular_group.T`) and `S=[[0,-1],[1,0]]` (see `modular_group.S`), by
  instead using abstract theory on the properness of certain maps (phrased in terms of the filters
  `filter.cocompact`, `filter.cofinite`, etc) to deduce existence theorems, first to prove the
  existence of `g` maximizing `(g‚Ä¢z).im` (see `modular_group.exists_g_with_max_im`), and then among
  those, to minimize `|(g‚Ä¢z).re|` (see `modular_group.exists_g_with_given_cd_and_min_re`).
-/

open complex matrix matrix.special_linear_group upper_half_plane
noncomputable theory

local notation `SL(` n `, ` R `)`:= special_linear_group (fin n) R
local prefix `‚Üë‚Çò`:1024 := @coe _ (matrix (fin 2) (fin 2) ‚Ñ§) _


open_locale upper_half_plane

local attribute [instance] fintype.card_fin_even

namespace modular_group

section upper_half_plane_action

/-- The action of `SL(2, ‚Ñ§)` on the upper half-plane, as a restriction of the `SL(2, ‚Ñù)`-action. -/
instance : mul_action SL(2, ‚Ñ§) ‚Ñç :=
mul_action.comp_hom ‚Ñç (map (int.cast_ring_hom ‚Ñù))

@[simp] lemma coe_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : ‚Üë(g ‚Ä¢ z) = num g z / denom g z := rfl
@[simp] lemma re_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g ‚Ä¢ z).re = (num g z / denom g z).re := rfl
@[simp] lemma smul_coe (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g : SL(2,‚Ñù)) ‚Ä¢ z = g ‚Ä¢ z := rfl

@[simp] lemma neg_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : -g ‚Ä¢ z = g ‚Ä¢ z :=
show ‚Üë(-g) ‚Ä¢ _ = _, by simp [neg_smul g z]

lemma im_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g ‚Ä¢ z).im = (num g z / denom g z).im := rfl

lemma im_smul_eq_div_norm_sq (g : SL(2, ‚Ñ§)) (z : ‚Ñç) :
  (g ‚Ä¢ z).im = z.im / (complex.norm_sq (denom g z)) :=
im_smul_eq_div_norm_sq g z

@[simp] lemma denom_apply (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : denom g z = ‚Üë‚Çòg 1 0 * z + ‚Üë‚Çòg 1 1 := by simp

end upper_half_plane_action

section bottom_row

/-- The two numbers `c`, `d` in the "bottom_row" of `g=[[*,*],[c,d]]` in `SL(2, ‚Ñ§)` are coprime. -/
lemma bottom_row_coprime (g : SL(2, ‚Ñ§)) : is_coprime (‚Üë‚Çòg 1 0) (‚Üë‚Çòg 1 1) :=
begin
  use [- g 0 1, g 0 0],
  have := det_fin_two g,
  have := g.det_coe,
  simp only [coe_fn_eq_coe] at *,
  linarith
end

/-- Every pair `![c, d]` of coprime integers is the "bottom_row" of some element `g=[[*,*],[c,d]]`
of `SL(2,‚Ñ§)`. -/
lemma bottom_row_surj :
  set.surj_on (Œª g : SL(2, ‚Ñ§), ‚Üë‚Çòg 1) set.univ {cd | is_coprime (cd 0) (cd 1)} :=
begin
  rintros cd ‚ü®b‚ÇÄ, a, gcd_eqn‚ü©,
  let A := ![![a, -b‚ÇÄ], cd],
  have det_A_1 : det A = 1,
  { convert gcd_eqn,
    simp [A, det_fin_two, (by ring : a * (cd 1) + b‚ÇÄ * (cd 0) = b‚ÇÄ * (cd 0) + a * (cd 1))] },
  refine ‚ü®‚ü®A, det_A_1‚ü©, set.mem_univ _, _‚ü©,
  ext; simp [A]
end

end bottom_row

section tendsto_lemmas

open filter continuous_linear_map
local attribute [instance] matrix.normed_group matrix.normed_space

/-- The function `(c,d) ‚Üí |cz+d|^2` is proper, that is, preimages of bounded-above sets are finite.
-/
lemma tendsto_norm_sq_coprime_pair (z : ‚Ñç) :
  filter.tendsto (Œª p : fin 2 ‚Üí ‚Ñ§, ((p 0 : ‚ÑÇ) * z + p 1).norm_sq)
  cofinite at_top :=
begin
  let f : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚ÑÇ := (linear_map.proj 0 : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù).smul_right (z:‚ÑÇ)
    + (linear_map.proj 1 : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù).smul_right 1,
  have : (Œª (p : fin 2 ‚Üí ‚Ñ§), norm_sq ((p 0 : ‚ÑÇ) * ‚Üëz + ‚Üë(p 1)))
    = norm_sq ‚àò f ‚àò (Œª p : fin 2 ‚Üí ‚Ñ§, (coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò p),
  { ext,
    simp only [linear_map.coe_proj, mul_one, real_smul, function.comp_app, of_real_int_cast,
      linear_map.coe_smul_right, linear_map.add_apply] },
  rw this,
  have hf : f.ker = ‚ä•,
  { let g : ‚ÑÇ ‚Üí‚Çó[‚Ñù] (fin 2 ‚Üí ‚Ñù) :=
      linear_map.pi ![im_lm, im_lm.comp ((z:‚ÑÇ) ‚Ä¢ (conj_ae  : ‚ÑÇ ‚Üí‚Çó[‚Ñù] ‚ÑÇ))],
    suffices : ((z:‚ÑÇ).im‚Åª¬π ‚Ä¢ g).comp f = linear_map.id,
    { exact linear_map.ker_eq_bot_of_inverse this },
    apply linear_map.ext,
    intros c,
    have hz : 0 < (z:‚ÑÇ).im := z.2,
    have : (z:‚ÑÇ).im ‚â† 0 := hz.ne',
    ext i,
    fin_cases i,
    { field_simp },
    dsimp [g],
    field_simp,
    ring },
  have h‚ÇÅ := (linear_equiv.closed_embedding_of_injective hf).tendsto_cocompact,
  have h‚ÇÇ : tendsto (Œª p : fin 2 ‚Üí ‚Ñ§, (coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò p) cofinite (cocompact _),
  { convert tendsto.pi_map_Coprod (Œª i, int.tendsto_coe_cofinite),
    { rw Coprod_cofinite },
    { rw Coprod_cocompact } },
  exact tendsto_norm_sq_cocompact_at_top.comp (h‚ÇÅ.comp h‚ÇÇ)
end


/-- Given `coprime_pair` `p=(c,d)`, the matrix `[[a,b],[*,*]]` is sent to `a*c+b*d`.
  This is the linear map version of this operation.
-/
def acbd (p : fin 2 ‚Üí ‚Ñ§) : (matrix (fin 2) (fin 2) ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù :=
(p 0 ‚Ä¢ linear_map.proj 0 + p 1 ‚Ä¢ linear_map.proj 1 : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù).comp (linear_map.proj 0)

@[simp] lemma acbd_apply (p : fin 2 ‚Üí ‚Ñ§) (g : matrix (fin 2) (fin 2) ‚Ñù) :
  acbd p g = p 0 * g 0 0 + p 1 * g 0 1 :=
by simp [acbd]


/-- Linear map sending the matrix [a b; c d] to `(ac‚ÇÄ+bd‚ÇÄ , ad‚ÇÄ - bc‚ÇÄ, c, d)`, for some fixed
  `(c‚ÇÄ, d‚ÇÄ)`.
-/
def acbd_extend (cd : fin 2 ‚Üí ‚Ñ§) : (matrix (fin 2) (fin 2) ‚Ñù) ‚Üí‚Çó[‚Ñù] ((fin 2 ‚Üí ‚Ñù) √ó (fin 2 ‚Üí ‚Ñù)) :=
((matrix.mul_vec_lin ![![(cd 0:‚Ñù), cd 1], ![cd 1,-cd 0]]).comp
  (linear_map.proj 0 : (matrix (fin 2) (fin 2) ‚Ñù) ‚Üí‚Çó[‚Ñù] _)).prod
  (linear_map.proj 1)

lemma acbd_extend_ker_eq_bot {cd : fin 2 ‚Üí ‚Ñ§} (hcd : is_coprime (cd 0) (cd 1)) :
  (acbd_extend cd).ker = ‚ä• :=
begin
  rw linear_map.ker_eq_bot,
  have nonZ : ((cd 0)^2+(cd 1)^2:‚Ñù) ‚â† 0,
  { norm_cast,
    exact hcd.sq_add_sq_ne_zero },
  let F : matrix (fin 2) (fin 2) ‚Ñù := ((cd 0)^2+(cd 1)^2:‚Ñù)‚Åª¬π ‚Ä¢ ![![cd 0, cd 1], ![cd 1, -cd 0]],
  let f‚ÇÅ : (fin 2 ‚Üí ‚Ñù) ‚Üí (fin 2 ‚Üí ‚Ñù) := F.mul_vec_lin,
  let f : (fin 2 ‚Üí ‚Ñù) √ó (fin 2 ‚Üí ‚Ñù) ‚Üí matrix (fin 2) (fin 2) ‚Ñù := Œª ‚ü®x , cd‚ü©, ![f‚ÇÅ x, cd],
  have : function.left_inverse f (acbd_extend cd),
  { intros g,
    simp [acbd_extend, f, f‚ÇÅ, F, vec_head, vec_tail], -- squeeze_simp times out!
    ext i j,
    fin_cases i,
    { fin_cases j,
      { change (‚Üë(cd 0) ^ 2 + ‚Üë(cd 1) ^ 2)‚Åª¬π * ‚Üë(cd 0)
          * (‚Üë(cd 0) * g 0 0 + ‚Üë(cd 1) * g 0 1)
        + (‚Üë(cd 0) ^ 2 + ‚Üë(cd 1) ^ 2)‚Åª¬π * ‚Üë(cd 1)
          * (‚Üë(cd 1) * g 0 0 + -(‚Üë(cd 0) * g 0 1)) = _,
        field_simp,
        ring },
      { change (‚Üë(cd 0) ^ 2 + ‚Üë(cd 1) ^ 2)‚Åª¬π * ‚Üë(cd 1)
          * (‚Üë(cd 0) * g 0 0 + ‚Üë(cd 1) * g 0 1)
        + -((‚Üë(cd 0) ^ 2 + ‚Üë(cd 1) ^ 2)‚Åª¬π * ‚Üë(cd 0)
          * (‚Üë(cd 1) * g 0 0 + -(‚Üë(cd 0) * g 0 1))) = _,
        field_simp,
        ring } },
    { fin_cases j; refl } },
  exact this.injective,
end

/-- The map `acbd` is proper, that is, preimages of cocompact sets are finite in `[[*,*],[c,d]]`.-/
theorem tendsto_acbd {cd : fin 2 ‚Üí ‚Ñ§} (hcd : is_coprime (cd 0) (cd 1)) :
  tendsto (Œª g : {g : SL(2, ‚Ñ§) // g 1 = cd}, acbd cd ‚Üë(‚Üëg : SL(2, ‚Ñù))) cofinite (cocompact ‚Ñù) :=
begin
  let mB : ‚Ñù ‚Üí ((fin 2 ‚Üí ‚Ñù) √ó (fin 2 ‚Üí ‚Ñù)) := Œª t, (![t, 1], coe ‚àò cd),
  have hmB : continuous mB,
  { refine continuous.prod_mk (continuous_pi _) continuous_const,
    intros i,
    fin_cases i,
    { exact continuous_id },
    { simpa using continuous_const } },
  convert filter.tendsto.of_tendsto_comp _ (comap_cocompact hmB),
  let f‚ÇÅ : SL(2, ‚Ñ§) ‚Üí matrix (fin 2) (fin 2) ‚Ñù :=
    Œª g, matrix.map (‚Üëg : matrix _ _ ‚Ñ§) (coe : ‚Ñ§ ‚Üí ‚Ñù),
  have cocompact_‚Ñù_to_cofinite_‚Ñ§_matrix :
    tendsto (Œª m : matrix (fin 2) (fin 2) ‚Ñ§, matrix.map m (coe : ‚Ñ§ ‚Üí ‚Ñù)) cofinite (cocompact _),
  { convert tendsto.pi_map_Coprod (Œª i, tendsto.pi_map_Coprod (Œª j, int.tendsto_coe_cofinite)),
    { simp [Coprod_cofinite] },
    { simp only [Coprod_cocompact],
      refl } },
  have hf‚ÇÅ : tendsto f‚ÇÅ cofinite (cocompact _) :=
    cocompact_‚Ñù_to_cofinite_‚Ñ§_matrix.comp subtype.coe_injective.tendsto_cofinite,
  have hf‚ÇÇ := (linear_equiv.closed_embedding_of_injective
    (acbd_extend_ker_eq_bot hcd)).tendsto_cocompact,
  convert hf‚ÇÇ.comp (hf‚ÇÅ.comp subtype.coe_injective.tendsto_cofinite) using 1,
  funext g,
  obtain ‚ü®g, hg‚ü© := g,
  simp [mB, f‚ÇÅ, acbd_extend], -- squeeze_simp fails here for some reason
  split,
  { ext i,
    fin_cases i,
    { simp [vec_head, vec_tail] },
    { have : (1:‚Ñù) = ‚Üë(g 1 1) * ‚Üë(g 0 0) + -(‚Üë(g 1 0) * ‚Üë(g 0 1)),
      { norm_cast,
        simp only [‚Üê g.det_coe, det_fin_two, coe_fn_eq_coe],
        ring },
      simpa [‚Üê hg, vec_head, vec_tail] using this } },
  { rw ‚Üê hg,
    ext i,
    fin_cases i; refl }
end

/-- This replaces `(g‚Ä¢z).re = a/c + *` in the standard theory with the following novel identity:

  `g ‚Ä¢ z = (a c + b d) / (c^2 + d^2) + (d z - c) / ((c^2 + d^2) (c z + d))`

  which does not
  need to be decomposed depending on whether `c = 0`. -/
lemma smul_eq_acbd_add {p : fin 2 ‚Üí ‚Ñ§} (hp : is_coprime (p 0) (p 1)) (z : ‚Ñç) {g : SL(2,‚Ñ§)}
  (hg : ‚Üë‚Çòg 1 = p) :
  ‚Üë(g ‚Ä¢ z) = ((acbd p ‚Üë(g : SL(2, ‚Ñù))) : ‚ÑÇ) / (p 0 ^ 2 + p 1 ^ 2)
    + ((p 1 : ‚ÑÇ) * z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1)) :=
begin
  have nonZ1 : (p 0 : ‚ÑÇ) ^ 2 + (p 1) ^ 2 ‚â† 0 := by exact_mod_cast hp.sq_add_sq_ne_zero,
  have : (coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò p ‚â† 0 := Œª h, (hp.ne_zero ‚àò (@int.cast_injective ‚Ñù _ _ _).comp_left) h,
  have nonZ2 : (p 0 : ‚ÑÇ) * z + p 1 ‚â† 0 := by simpa using linear_ne_zero _ z this,
  field_simp [nonZ1, nonZ2, denom_ne_zero, -upper_half_plane.denom, -denom_apply],
  rw (by simp : (p 1 : ‚ÑÇ) * z - p 0 = ((p 1) * z - p 0) * ‚Üë(det (‚Üëg : matrix (fin 2) (fin 2) ‚Ñ§))),
  rw [‚Üêhg, det_fin_two],
  simp only [int.coe_cast_ring_hom, coe_matrix_coe, coe_fn_eq_coe,
    int.cast_mul, of_real_int_cast, map_apply, denom, int.cast_sub],
  ring,
end

lemma tendsto_abs_re_smul (z:‚Ñç) {p : fin 2 ‚Üí ‚Ñ§} (hp : is_coprime (p 0) (p 1)) :
  tendsto (Œª g : {g : SL(2, ‚Ñ§) // g 1 = p}, |((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re|)
    cofinite at_top :=
begin
  suffices : tendsto (Œª g : (Œª g : SL(2, ‚Ñ§), g 1) ‚Åª¬π' {p}, (((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re))
    cofinite (cocompact ‚Ñù),
  { exact tendsto_norm_cocompact_at_top.comp this },
  have : ((p 0 : ‚Ñù) ^ 2 + p 1 ^ 2)‚Åª¬π ‚â† 0,
  { apply inv_ne_zero,
    exact_mod_cast hp.sq_add_sq_ne_zero },
  let f := homeomorph.mul_right‚ÇÄ _ this,
  let ff := homeomorph.add_right (((p 1:‚ÑÇ)* z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1))).re,
  convert ((f.trans ff).closed_embedding.tendsto_cocompact).comp (tendsto_acbd hp),
  ext g,
  change ((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re = (acbd p ‚Üë(‚Üëg : SL(2, ‚Ñù))) / (p 0 ^ 2 + p 1 ^ 2)
  + (((p 1:‚ÑÇ )* z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1))).re,
  exact_mod_cast (congr_arg complex.re (smul_eq_acbd_add hp z g.2))
end

end tendsto_lemmas

section fundamental_domain

/-- For `z : ‚Ñç`, there is a `g : SL(2,‚Ñ§)` maximizing `(g‚Ä¢z).im` -/
lemma exists_g_with_max_im (z : ‚Ñç) :
  ‚àÉ g : SL(2, ‚Ñ§), ‚àÄ g' : SL(2, ‚Ñ§), (g' ‚Ä¢ z).im ‚â§ (g ‚Ä¢ z).im :=
begin
  classical,
  let s : set (fin 2 ‚Üí ‚Ñ§) := {cd | is_coprime (cd 0) (cd 1)},
  have hs : s.nonempty := ‚ü®![1, 1], is_coprime_one_left‚ü©,
  obtain ‚ü®p, hp_coprime, hp‚ü© :=
    filter.tendsto.exists_within_forall_le hs (tendsto_norm_sq_coprime_pair z),
  obtain ‚ü®g, -, hg‚ü© := bottom_row_surj hp_coprime,
  refine ‚ü®g, Œª g', _‚ü©,
  rw [im_smul_eq_div_norm_sq, im_smul_eq_div_norm_sq, div_le_div_left],
  { simpa [‚Üê hg] using hp (g' 1) (bottom_row_coprime g') },
  { exact z.im_pos },
  { exact norm_sq_denom_pos g' z },
  { exact norm_sq_denom_pos g z },
end

/-- Given `z : ‚Ñç` and a bottom row `(c,d)`, among the `g : SL(2,‚Ñ§)` with this bottom row, minimize
  `|(g‚Ä¢z).re|`.  -/
lemma exists_g_with_given_cd_and_min_re (z:‚Ñç) {cd : fin 2 ‚Üí ‚Ñ§} (hcd : is_coprime (cd 0) (cd 1)) :
  ‚àÉ g : SL(2,‚Ñ§), ‚Üë‚Çòg 1 = cd ‚àß (‚àÄ g' : SL(2,‚Ñ§), ‚Üë‚Çòg 1 = ‚Üë‚Çòg' 1 ‚Üí
  |(g ‚Ä¢ z).re| ‚â§ |(g' ‚Ä¢ z).re|) :=
begin
  haveI : nonempty {g : SL(2, ‚Ñ§) // g 1 = cd} := let ‚ü®x, hx‚ü© := bottom_row_surj hcd in ‚ü®‚ü®x, hx.2‚ü©‚ü©,
  obtain ‚ü®g, hg‚ü© := filter.tendsto.exists_forall_le (tendsto_abs_re_smul z hcd),
  refine ‚ü®g, g.2, _‚ü©,
  { intros g1 hg1,
    have : g1 ‚àà ((Œª g : SL(2, ‚Ñ§), g 1) ‚Åª¬π' {cd}),
    { rw [set.mem_preimage, set.mem_singleton_iff],
      exact eq.trans hg1.symm (set.mem_singleton_iff.mp (set.mem_preimage.mp g.2)) },
    exact hg ‚ü®g1, this‚ü© },
end

/-- The matrix `T = [[1,1],[0,1]]` as an element of `SL(2,‚Ñ§)` -/
def T : SL(2,‚Ñ§) := ‚ü®![![1, 1], ![0, 1]], by simp [matrix.det_fin_two]‚ü©

/-- The matrix `T' (= T‚Åª¬π) = [[1,-1],[0,1]]` as an element of `SL(2,‚Ñ§)` -/
def T' : SL(2,‚Ñ§) := ‚ü®![![1, -1], ![0, 1]], by simp [matrix.det_fin_two]‚ü©

/-- The matrix `S = [[0,-1],[1,0]]` as an element of `SL(2,‚Ñ§)` -/
def S : SL(2,‚Ñ§) := ‚ü®![![0, -1], ![1, 0]], by simp [matrix.det_fin_two]‚ü©

/-- The standard (closed) fundamental domain of the action of `SL(2,‚Ñ§)` on `‚Ñç` -/
def fundamental_domain : set ‚Ñç :=
{z | 1 ‚â§ (complex.norm_sq z) ‚àß |z.re| ‚â§ (1 : ‚Ñù) / 2}

notation `ùíü` := fundamental_domain

/-- If `|z|<1`, then applying `S` strictly decreases `im` -/
lemma im_lt_im_S {z : ‚Ñç} (h: norm_sq z < 1) : z.im < (S ‚Ä¢ z).im :=
begin
  have : z.im < z.im / norm_sq (z:‚ÑÇ),
  { have imz : 0 < z.im := im_pos z,
    apply (lt_div_iff z.norm_sq_pos).mpr,
    nlinarith },
  convert this,
  simp only [im_smul_eq_div_norm_sq],
  field_simp [norm_sq_denom_ne_zero, norm_sq_ne_zero, S]
end

/-- Any `z : ‚Ñç` can be moved to `ùíü` by an element of `SL(2,‚Ñ§)`  -/
lemma exists_smul_mem_fundamental_domain (z : ‚Ñç) : ‚àÉ g : SL(2,‚Ñ§), g ‚Ä¢ z ‚àà ùíü :=
begin
  -- obtain a g‚ÇÄ which maximizes im (g ‚Ä¢ z),
  obtain ‚ü®g‚ÇÄ, hg‚ÇÄ‚ü© := exists_g_with_max_im z,
  -- then among those, minimize re
  obtain ‚ü®g, hg, hg'‚ü© := exists_g_with_given_cd_and_min_re z (bottom_row_coprime g‚ÇÄ),
  refine ‚ü®g, _‚ü©,
  -- `g` has same max im property as `g‚ÇÄ`
  have hg‚ÇÄ' : ‚àÄ (g' : SL(2,‚Ñ§)), (g' ‚Ä¢ z).im ‚â§ (g ‚Ä¢ z).im,
  { have hg'' : (g ‚Ä¢ z).im = (g‚ÇÄ ‚Ä¢ z).im,
    { rw [im_smul_eq_div_norm_sq, im_smul_eq_div_norm_sq, denom_apply, denom_apply, hg] },
    simpa only [hg''] using hg‚ÇÄ },
  split,
  { -- Claim: `|g‚Ä¢z| > 1`. If not, then `S‚Ä¢g‚Ä¢z` has larger imaginary part
    contrapose! hg‚ÇÄ',
    refine ‚ü®S * g, _‚ü©,
    rw mul_action.mul_smul,
    exact im_lt_im_S hg‚ÇÄ' },
  { -- Claim: `|Re(g‚Ä¢z)| < 1/2`; if not, then either `T` or `T'` decrease |Re|.
    rw abs_le,
    split,
    { contrapose! hg',
      refine ‚ü®T * g, _, _‚ü©,
      { -- goal: `bottom_row (T * g) = bottom_row g`.
        simp [T, vec_head, vec_tail], },
      rw mul_action.mul_smul,
      change (g ‚Ä¢ z).re < _ at hg',
      have : |(g ‚Ä¢ z).re + 1| < |(g ‚Ä¢ z).re| :=
        by cases abs_cases ((g ‚Ä¢ z).re + 1); cases abs_cases (g ‚Ä¢ z).re; linarith,
      convert this,
      -- goal: `(T ‚Ä¢ g ‚Ä¢ z).re = (g ‚Ä¢ z).re + 1`.
      simp [T] },
    { contrapose! hg',
      refine ‚ü®T' * g, _, _‚ü©,
      { -- goal: `bottom_row (T' * g) = bottom_row g`.
        simp [T', vec_head, vec_tail] },
      rw mul_action.mul_smul,
      change _ < (g ‚Ä¢ z).re at hg',
      have : |(g ‚Ä¢ z).re - 1| < |(g ‚Ä¢ z).re| :=
        by cases abs_cases ((g ‚Ä¢ z).re - 1); cases abs_cases (g ‚Ä¢ z).re; linarith,
      convert this,
      -- goal: `(T' ‚Ä¢ g ‚Ä¢ z).re = (g ‚Ä¢ z).re - 1`.
      simp [T', sub_eq_add_neg] } }
end

end fundamental_domain

end modular_group
