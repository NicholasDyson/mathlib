import analysis.special_functions.pow
import number_theory.liouville.basic
import topology.instances.irrational

/-!
-/

open filter metric real set
open_locale filter topological_space

def liouville_with (p x : ‚Ñù) : Prop :=
‚àÉ C, ‚àÉ·∂† n : ‚Ñï in at_top, ‚àÉ m : ‚Ñ§, x ‚â† m / n ‚àß |x - m / n| < C / n ^ p

namespace liouville_with

variables {p q x y : ‚Ñù} {r : ‚Ñö} {m : ‚Ñ§} {n : ‚Ñï}

lemma exists_pos (h : liouville_with p x) :
  ‚àÉ (C : ‚Ñù) (h‚ÇÄ : 0 < C),
    ‚àÉ·∂† n : ‚Ñï in at_top, 1 ‚â§ n ‚àß ‚àÉ m : ‚Ñ§, x ‚â† m / n ‚àß |x - m / n| < C / n ^ p :=
begin
  rcases h with ‚ü®C, hC‚ü©,
  refine ‚ü®max C 1, zero_lt_one.trans_le $ le_max_right _ _, _‚ü©,
  refine (hC.and_eventually (eventually_ge_at_top 1)).mono _,
  rintro n ‚ü®‚ü®m, hne, hlt‚ü©, hle‚ü©,
  refine ‚ü®hle, ‚ü®m, hne, hlt.trans_le _‚ü©‚ü©,
  exact div_le_div_of_le (rpow_nonneg_of_nonneg n.cast_nonneg _) (le_max_left _ _)
end

lemma mono (h : liouville_with p x) (hle : q ‚â§ p) : liouville_with q x :=
begin
  rcases h.exists_pos with ‚ü®C, hC‚ÇÄ, hC‚ü©,
  refine ‚ü®C, hC.mono _‚ü©, rintro n ‚ü®hn, m, hne, hlt‚ü©,
  refine ‚ü®m, hne, hlt.trans_le $ div_le_div_of_le_left hC‚ÇÄ.le _ _‚ü©,
  exacts [rpow_pos_of_pos (nat.cast_pos.2 hn) _,
    rpow_le_rpow_of_exponent_le (nat.one_le_cast.2 hn) hle]
end

/-- If `x` satisfies Liouville condition with exponent `p` and `q < p`, then `x`
satisfies Liouville condition with exponent `q` and constant `1`. -/
lemma frequently_lt_rpow_neg (h : liouville_with p x) (hlt : q < p) :
  ‚àÉ·∂† n : ‚Ñï in at_top, ‚àÉ m : ‚Ñ§, x ‚â† m / n ‚àß |x - m / n| < n ^ (-q) :=
begin
  rcases h.exists_pos with ‚ü®C, hC‚ÇÄ, hC‚ü©,
  have : ‚àÄ·∂† n : ‚Ñï in at_top, C < n ^ (p - q),
    by simpa only [(‚àò), neg_sub, one_div] using ((tendsto_rpow_at_top (sub_pos.2 hlt)).comp
      tendsto_coe_nat_at_top_at_top).eventually (eventually_gt_at_top C),
  refine (hC.and_eventually this).mono _,
  rintro n ‚ü®‚ü®hn, m, hne, hlt‚ü©, hnC‚ü©,
  replace hn : (0 : ‚Ñù) < n := nat.cast_pos.2 hn,
  refine ‚ü®m, hne, hlt.trans $ (div_lt_iff $ rpow_pos_of_pos hn _).2 _‚ü©,
  rwa [mul_comm, ‚Üê rpow_add hn, ‚Üê sub_eq_add_neg]
end

lemma mul_rat (h : liouville_with p x) (hr : r ‚â† 0) : liouville_with p (x * r) :=
begin
  rcases h.exists_pos with ‚ü®C, hC‚ÇÄ, hC‚ü©,
  refine ‚ü®r.denom ^ p * (|r| * C), (tendsto_id.nsmul_at_top r.pos).frequently (hC.mono _)‚ü©,
  rintro n ‚ü®hn, m, hne, hlt‚ü©,
  have A : (‚Üë(r.num * m) : ‚Ñù) / ‚Üë(r.denom ‚Ä¢ id n) = (m / n) * r,
    by simp [‚Üê div_mul_div, ‚Üê r.cast_def, mul_comm],
  refine ‚ü®r.num * m, _, _‚ü©,
  { rw A, simp [hne, hr] },
  { rw [A, ‚Üê sub_mul, abs_mul],
    simp only [smul_eq_mul, id.def, nat.cast_mul],
    refine (mul_lt_mul_of_pos_right hlt $ abs_pos.2 $ rat.cast_ne_zero.2 hr).trans_le _,
    rw [mul_rpow, mul_div_mul_left, mul_comm, mul_div_assoc],
    exacts [(rpow_pos_of_pos (nat.cast_pos.2 r.pos) _).ne', nat.cast_nonneg _, nat.cast_nonneg _] }
end

lemma mul_rat_iff (hr : r ‚â† 0) : liouville_with p (x * r) ‚Üî liouville_with p x :=
‚ü®Œª h, by simpa only [mul_assoc, ‚Üê rat.cast_mul, mul_inv_cancel hr, rat.cast_one, mul_one]
  using h.mul_rat (inv_ne_zero hr), Œª h, h.mul_rat hr‚ü©

lemma rat_mul_iff (hr : r ‚â† 0) : liouville_with p (r * x) ‚Üî liouville_with p x :=
by rw [mul_comm, mul_rat_iff hr]

lemma rat_mul (h : liouville_with p x) (hr : r ‚â† 0) : liouville_with p (r * x) :=
(rat_mul_iff hr).2 h

lemma mul_int_iff (hm : m ‚â† 0) : liouville_with p (x * m) ‚Üî liouville_with p x :=
by rw [‚Üê rat.cast_coe_int, mul_rat_iff (int.cast_ne_zero.2 hm)]

lemma mul_int (h : liouville_with p x) (hm : m ‚â† 0) : liouville_with p (x * m) :=
(mul_int_iff hm).2 h

lemma int_mul_iff (hm : m ‚â† 0) : liouville_with p (m * x) ‚Üî liouville_with p x :=
by rw [mul_comm, mul_int_iff hm]

lemma int_mul (h : liouville_with p x) (hm : m ‚â† 0) : liouville_with p (m * x) :=
(int_mul_iff hm).2 h

lemma mul_nat_iff (hn : n ‚â† 0) : liouville_with p (x * n) ‚Üî liouville_with p x :=
by rw [‚Üê rat.cast_coe_nat, mul_rat_iff (nat.cast_ne_zero.2 hn)]

lemma mul_nat (h : liouville_with p x) (hn : n ‚â† 0) : liouville_with p (x * n) :=
(mul_nat_iff hn).2 h

lemma nat_mul_iff (hn : n ‚â† 0) : liouville_with p (n * x) ‚Üî  liouville_with p x:=
by rw [mul_comm, mul_nat_iff hn]

lemma nat_mul (h : liouville_with p x) (hn : n ‚â† 0) : liouville_with p (n * x) :=
by { rw mul_comm, exact h.mul_nat hn }

lemma add_rat (h : liouville_with p x) (r : ‚Ñö) : liouville_with p (x + r) :=
begin
  rcases h.exists_pos with ‚ü®C, hC‚ÇÄ, hC‚ü©,
  refine ‚ü®r.denom ^ p * C, (tendsto_id.nsmul_at_top r.pos).frequently (hC.mono _)‚ü©,
  rintro n ‚ü®hn, m, hne, hlt‚ü©,
  have hr : (0 : ‚Ñù) < r.denom, from nat.cast_pos.2 r.pos,
  have hn' : (n : ‚Ñù) ‚â† 0, from nat.cast_ne_zero.2 (zero_lt_one.trans_le hn).ne',
  have : (‚Üë(r.denom * m + r.num * n : ‚Ñ§) / ‚Üë(r.denom ‚Ä¢ id n) : ‚Ñù) = m / n + r,
    by simp [add_div, hr.ne', mul_div_mul_left, mul_div_mul_right, hn', ‚Üê rat.cast_def],
  refine ‚ü®r.denom * m + r.num * n, _‚ü©, rw [this, add_sub_add_right_eq_sub],
  refine ‚ü®by simpa, hlt.trans_le (le_of_eq _)‚ü©,
  have : (r.denom ^ p : ‚Ñù) ‚â† 0, from (rpow_pos_of_pos hr _).ne',
  simp [mul_rpow, nat.cast_nonneg, mul_div_mul_left, this]
end

@[simp] lemma add_rat_iff : liouville_with p (x + r) ‚Üî liouville_with p x :=
‚ü®Œª h, by simpa using h.add_rat (-r), Œª h, h.add_rat r‚ü©

@[simp] lemma rat_add_iff : liouville_with p (r + x) ‚Üî liouville_with p x :=
by rw [add_comm, add_rat_iff]

lemma rat_add (h : liouville_with p x) (r : ‚Ñö) : liouville_with p (r + x) :=
add_comm x r ‚ñ∏ h.add_rat r

@[simp] lemma add_int_iff : liouville_with p (x + m) ‚Üî liouville_with p x :=
by rw [‚Üê rat.cast_coe_int m, add_rat_iff]

@[simp] lemma int_add_iff : liouville_with p (m + x) ‚Üî liouville_with p x :=
by rw [add_comm, add_int_iff]

@[simp] lemma add_nat_iff : liouville_with p (x + n) ‚Üî liouville_with p x :=
by rw [‚Üê rat.cast_coe_nat n, add_rat_iff]

@[simp] lemma nat_add_iff : liouville_with p (n + x) ‚Üî liouville_with p x :=
by rw [add_comm, add_nat_iff]

lemma add_int (h : liouville_with p x) (m : ‚Ñ§) : liouville_with p (x + m) := add_int_iff.2 h

lemma int_add (h : liouville_with p x) (m : ‚Ñ§) : liouville_with p (m + x) := int_add_iff.2 h

lemma add_nat (h : liouville_with p x) (n : ‚Ñï) : liouville_with p (x + n) := h.add_int n

lemma nat_add (h : liouville_with p x) (n : ‚Ñï) : liouville_with p (n + x) := h.int_add n

protected lemma neg (h : liouville_with p x) : liouville_with p (-x) :=
begin
  rcases h with ‚ü®C, hC‚ü©,
  refine ‚ü®C, hC.mono _‚ü©,
  rintro n ‚ü®m, hne, hlt‚ü©,
  use (-m), simp [neg_div, abs_sub_comm _ x, *]
end

@[simp] lemma neg_iff : liouville_with p (-x) ‚Üî liouville_with p x :=
‚ü®Œª h, neg_neg x ‚ñ∏ h.neg, liouville_with.neg‚ü©

@[simp] lemma sub_rat_iff : liouville_with p (x - r) ‚Üî liouville_with p x :=
by rw [sub_eq_add_neg, ‚Üê rat.cast_neg, add_rat_iff]

lemma sub_rat (h : liouville_with p x) (r : ‚Ñö) : liouville_with p (x - r) :=
sub_rat_iff.2 h

@[simp] lemma sub_int_iff : liouville_with p (x - m) ‚Üî liouville_with p x :=
by rw [‚Üê rat.cast_coe_int, sub_rat_iff]

lemma sub_int (h : liouville_with p x) (m : ‚Ñ§) : liouville_with p (x - m) := sub_int_iff.2 h

@[simp] lemma sub_nat_iff : liouville_with p (x - n) ‚Üî liouville_with p x :=
by rw [‚Üê rat.cast_coe_nat, sub_rat_iff]

lemma sub_nat (h : liouville_with p x) (n : ‚Ñï) : liouville_with p (x - n) := sub_nat_iff.2 h

@[simp] lemma rat_sub_iff : liouville_with p (r - x) ‚Üî liouville_with p x :=
by simp [sub_eq_add_neg]

lemma rat_sub (h : liouville_with p x) (r : ‚Ñö) : liouville_with p (r - x) := rat_sub_iff.2 h

@[simp] lemma int_sub_iff : liouville_with p (m - x) ‚Üî liouville_with p x :=
by simp [sub_eq_add_neg]

lemma int_sub (h : liouville_with p x) (m : ‚Ñ§) : liouville_with p (m - x) := int_sub_iff.2 h

@[simp] lemma nat_sub_iff : liouville_with p (n - x) ‚Üî liouville_with p x :=
by simp [sub_eq_add_neg]

lemma nat_sub (h : liouville_with p x) (n : ‚Ñï) : liouville_with p (n - x) := nat_sub_iff.2 h

end liouville_with

namespace liouville

variables {x : ‚Ñù}

lemma frequently_exists_num (hx : liouville x) (n : ‚Ñï) :
  ‚àÉ·∂† b : ‚Ñï in at_top, ‚àÉ a : ‚Ñ§, x ‚â† a / b ‚àß |x - a / b| < 1 / b ^ n :=
begin
  refine not_not.1 (Œª H, _),
  simp only [liouville, not_forall, not_exists, not_frequently, not_and, not_lt,
    eventually_at_top] at H,
  rcases H with ‚ü®N, hN‚ü©,
  have : ‚àÄ b > (1 : ‚Ñï), ‚àÄ·∂† m : ‚Ñï in at_top, ‚àÄ a : ‚Ñ§, (1 / b ^ m : ‚Ñù) ‚â§ |x - a / b|,
  { intros b hb,
    have hb0' : (b : ‚Ñö) ‚â† 0 := (zero_lt_one.trans (nat.one_lt_cast.2 hb)).ne',
    replace hb : (1 : ‚Ñù) < b := nat.one_lt_cast.2 hb,
    have hb0 : (0 : ‚Ñù) < b := zero_lt_one.trans hb,
    have H : tendsto (Œª m, 1 / b ^ m : ‚Ñï ‚Üí ‚Ñù) at_top (ùìù 0),
    { simp only [one_div],
      exact tendsto_inv_at_top_zero.comp (tendsto_pow_at_top_at_top_of_one_lt hb) },
    refine (H.eventually (hx.irrational.eventually_forall_le_dist_cast_div b)).mono _,
    exact Œª m hm a, hm a },
  have : ‚àÄ·∂† m : ‚Ñï in at_top, ‚àÄ b < N, 1 < b ‚Üí ‚àÄ a : ‚Ñ§, (1 / b ^ m : ‚Ñù) ‚â§ |x - a / b|,
    from (finite_lt_nat N).eventually_all.2 (Œª b hb, eventually_imp_distrib_left.2 (this b)),
  rcases (this.and (eventually_ge_at_top n)).exists with ‚ü®m, hm, hnm‚ü©,
  rcases hx m with ‚ü®a, b, hb, hne, hlt‚ü©,
  lift b to ‚Ñï using zero_le_one.trans hb.le, norm_cast at hb, push_cast at hne hlt,
  cases le_or_lt N b,
  { refine (hN b h a hne).not_lt (hlt.trans_le _),
    replace hb : (1 : ‚Ñù) < b := nat.one_lt_cast.2 hb,
    have hb0 : (0 : ‚Ñù) < b := zero_lt_one.trans hb,
    exact one_div_le_one_div_of_le (pow_pos hb0 _) (pow_le_pow hb.le hnm) },
  { exact (hm b h hb _).not_lt hlt }
end

protected lemma liouville_with (hx : liouville x) (p : ‚Ñù) : liouville_with p x :=
begin
  suffices : liouville_with ‚åàp‚åâ‚Çä x, from this.mono (le_nat_ceil p),
  refine ‚ü®1, ((hx.frequently_exists_num ‚åàp‚åâ‚Çä).and_eventually (eventually_gt_at_top 1)).mono _‚ü©,
  rintro b ‚ü®‚ü®a, hne, hlt‚ü©, hb‚ü©,
  refine ‚ü®a, hne, _‚ü©,
  rwa rpow_nat_cast
end

end liouville
