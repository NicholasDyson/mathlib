/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/

import measure_theory.simple_func_dense

/-!
# Strongly measurable functions

A function `f` is said to be strongly measurable with respect to a measure `Œº` if `f` is the
sequential limit of simple functions whose support has finite measure.

The main property of those functions is `strongly_measurable.exists_set_sigma_finite`: there exists
a measurable set such that  `f =·µê[Œº.restrict t·∂ú] 0` and `sigma_finite (Œº.restrict t)`.
As a consequence, we can prove some results for those functions as if the measure was sigma-finite.

## Main results

- `strongly_measurable.exists_set_sigma_finite` : if a function `f` is strongly measurable with
respect to a measure `Œº`, then there exists a measurable set `t` such that `f =·µê[Œº.restrict t·∂ú] 0`
and `sigma_finite (Œº.restrict t)`.
- `mem_‚Ñíp.ae_strongly_measurable` : if `mem_‚Ñíp f p Œº` with `0 < p < ‚àû`, then
`‚àÉ g, strongly_measurable g Œº ‚àß f =·µê[Œº] g`.
- `Lp.strongly_measurable` : for `0 < p < ‚àû`, `Lp` functions are strongly measurable.

TODO: prove that constant non-zero functions are stongly measurable with respect to a measure `Œº`
iff `Œº` is sigma finite.

-/

open measure_theory filter topological_space
open_locale ennreal topological_space measure_theory

namespace measure_theory

/-- A function is `strongly_measurable` with respect to a measure if it is the limit of simple
  functions with support with finite measure. -/
def strongly_measurable {Œ± Œ≥} [semi_normed_group Œ≥] {m0 : measurable_space Œ±}
  [decidable_pred (Œª (y : Œ≥), y ‚â† 0)] (f : Œ± ‚Üí Œ≥) (Œº : measure Œ±) : Prop :=
‚àÉ fs : ‚Ñï ‚Üí simple_func Œ± Œ≥,
  (‚àÄ n, Œº (‚ãÉ y ‚àà finset.filter (Œª (y : Œ≥), y ‚â† 0) (fs n).range, (fs n) ‚Åª¬π' {y}) < ‚àû)
  ‚àß (‚àÄ x, tendsto (Œª n, fs n x) at_top (ùìù (f x)))

namespace strongly_measurable

variables {Œ± H : Type*} {m0 : measurable_space Œ±} [normed_group H] [measurable_space H]
  {Œº : measure Œ±}

lemma measurable [decidable_pred (Œª (y : H), y ‚â† 0)] [borel_space H] {f : Œ± ‚Üí H}
  (hf : strongly_measurable f Œº) : measurable f :=
measurable_of_tendsto_metric (Œª n, (hf.some n).measurable) (tendsto_pi.mpr hf.some_spec.2)

variables [decidable_pred (Œª (y : H), y ‚â† 0)] [has_measurable_sub‚ÇÇ H] [measurable_singleton_class H]
  {f : Œ± ‚Üí H}

lemma exists_set_sigma_finite (hf : strongly_measurable f Œº) :
  ‚àÉ t, measurable_set t ‚àß f =·µê[Œº.restrict t·∂ú] 0 ‚àß sigma_finite (Œº.restrict t) :=
begin
  rcases hf with ‚ü®fs, hT_lt_top, h_approx‚ü©,
  let T := Œª n, ‚ãÉ y ‚àà finset.filter (Œª (y : H), y ‚â† 0) (fs n).range, (fs n) ‚Åª¬π' {y},
  have hT_meas : ‚àÄ n, measurable_set (T n),
    from Œª n, finset.measurable_set_bUnion _ (Œª y hy, simple_func.measurable_set_fiber _ _),
  let t := ‚ãÉ n, T n,
  refine ‚ü®t, measurable_set.Union hT_meas, _, _‚ü©,
  { have h_fs_zero : ‚àÄ n, fs n =·µê[Œº.restrict t·∂ú] 0,
    { refine Œª n, (ae_restrict_iff (measurable_set_eq_fun (fs n).measurable measurable_zero)).mpr _,
      refine eventually_of_forall (Œª x hxt, _),
      simp only [true_and, exists_prop, set.mem_preimage, set.mem_Union, set.mem_range,
        set.mem_singleton_iff, not_exists_not, exists_eq_right', finset.mem_filter,
        set.mem_compl_eq, simple_func.mem_range, exists_apply_eq_apply] at hxt,
      exact hxt n, },
    simp_rw eventually_eq at h_fs_zero,
    rw ‚Üê ae_all_iff at h_fs_zero,
    refine h_fs_zero.mono (Œª x hx, _),
    have h_approx_zero : tendsto (Œª (n : ‚Ñï), fs n x) at_top (ùìù 0),
    { have : (Œª (n : ‚Ñï), fs n x) = Œª n, 0, by { ext1 n, exact hx n, },
      rw this,
      exact tendsto_const_nhds, },
    exact tendsto_nhds_unique (h_approx x) h_approx_zero, },
  { refine measure.finite_spanning_sets_in.sigma_finite _ _,
    { exact set.range (Œª n, t·∂ú ‚à™ T n), },
    { refine ‚ü®Œª n, t·∂ú ‚à™ T n, Œª n, set.mem_range_self _, Œª n, _, _‚ü©,
      { rw [measure.restrict_apply' (measurable_set.Union hT_meas), set.union_inter_distrib_right,
          set.compl_inter_self t, set.empty_union],
        exact (measure_mono (set.inter_subset_left _ _)).trans_lt (hT_lt_top n), },
      rw ‚Üê set.union_Union t·∂ú T,
      exact set.compl_union_self _, },
    { intros s hs,
      rw set.mem_range at hs,
      cases hs with n hsn,
      rw ‚Üê hsn,
      exact (measurable_set.compl (measurable_set.Union hT_meas)).union (hT_meas n), }, },
end

/-- A measurable set `t` such that `f =·µê[Œº.restrict t·∂ú] 0` and `sigma_finite (Œº.restrict t)`. -/
def sigma_finite_set (hf : strongly_measurable f Œº) : set Œ± := hf.exists_set_sigma_finite.some

protected lemma measurable_set (hf : strongly_measurable f Œº) :
  measurable_set hf.sigma_finite_set :=
hf.exists_set_sigma_finite.some_spec.1

lemma ae_eq_zero_compl (hf : strongly_measurable f Œº) :
  f =·µê[Œº.restrict hf.sigma_finite_set·∂ú] 0 :=
hf.exists_set_sigma_finite.some_spec.2.1

lemma sigma_finite_restrict (hf : strongly_measurable f Œº) :
  sigma_finite (Œº.restrict hf.sigma_finite_set) :=
hf.exists_set_sigma_finite.some_spec.2.2

end strongly_measurable

variables {Œ± G : Type*} {p : ‚Ñù‚â•0‚àû} {m m0 : measurable_space Œ±} {Œº : measure Œ±}
  [normed_group G] [measurable_space G] [borel_space G] [second_countable_topology G]

lemma mem_‚Ñíp.strongly_measurable_of_measurable [decidable_pred (Œª (y : G), y ‚â† 0)] {f : Œ± ‚Üí G}
  (hf : mem_‚Ñíp f p Œº) (hf_meas : measurable f) (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) :
  strongly_measurable f Œº :=
begin
  let fs := simple_func.approx_on f hf_meas set.univ 0 (set.mem_univ _),
  refine ‚ü®fs, _, _‚ü©,
  { have h_fs_Lp : ‚àÄ n, mem_‚Ñíp (fs n) p Œº,
      from simple_func.mem_‚Ñíp_approx_on_univ hf_meas hf,
    refine Œª n, (measure_bUnion_finset_le _ _).trans_lt _,
    refine ennreal.sum_lt_top_iff.mpr (Œª y hy, _),
    refine simple_func.measure_preimage_lt_top_of_mem_‚Ñíp hp_pos hp_ne_top (fs n) (h_fs_Lp n) _ _,
    rw finset.mem_filter at hy,
    exact hy.2, },
  { exact Œª x, simple_func.tendsto_approx_on hf_meas (set.mem_univ 0)
      (by { rw [closure_univ], exact set.mem_univ (f x), }), },
end

lemma mem_‚Ñíp.ae_strongly_measurable [decidable_pred (Œª (y : G), y ‚â† 0)] {f : Œ± ‚Üí G}
  (hf : mem_‚Ñíp f p Œº) (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) :
  ‚àÉ g, strongly_measurable g Œº ‚àß f =·µê[Œº] g :=
begin
  obtain ‚ü®f', hf'_meas, hff'‚ü© := hf.ae_measurable,
  exact ‚ü®f', ((mem_‚Ñíp_congr_ae hff').mp hf).strongly_measurable_of_measurable hf'_meas hp_pos
    hp_ne_top, hff'‚ü©,
end

lemma integrable.ae_strongly_measurable [decidable_pred (Œª (y : G), y ‚â† 0)] {f : Œ± ‚Üí G}
  (hf : integrable f Œº) :
  ‚àÉ g, strongly_measurable g Œº ‚àß f =·µê[Œº] g :=
begin
  rw ‚Üê mem_‚Ñíp_one_iff_integrable at hf,
  exact hf.ae_strongly_measurable ennreal.zero_lt_one ennreal.coe_ne_top,
end

lemma Lp.strongly_measurable [decidable_pred (Œª (y : G), y ‚â† 0)] (f : Lp G p Œº)
  (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) :
  strongly_measurable f Œº :=
(Lp.mem_‚Ñíp f).strongly_measurable_of_measurable (Lp.measurable _) hp_pos hp_ne_top

lemma Lp.exists_set_sigma_finite (f : Lp G p Œº) (hp_pos : 0 < p) (hp_ne_top : p ‚â† ‚àû) :
  ‚àÉ t, measurable_set t ‚àß f =·µê[Œº.restrict t·∂ú] 0 ‚àß sigma_finite (Œº.restrict t) :=
begin
  haveI : decidable_pred (Œª (y : G), y ‚â† 0) := classical.dec_pred _,
  exact (Lp.strongly_measurable f hp_pos hp_ne_top).exists_set_sigma_finite,
end

lemma exists_set_sigma_finite_of_ae_strongly_measurable [decidable_pred (Œª (y : G), y ‚â† 0)]
  {f : Œ± ‚Üí G} (hf : ‚àÉ g, strongly_measurable g Œº ‚àß f =·µê[Œº] g) :
  ‚àÉ t, measurable_set t ‚àß f =·µê[Œº.restrict t·∂ú] 0 ‚àß sigma_finite (Œº.restrict t) :=
begin
  rcases hf with ‚ü®g, hg, hfg‚ü©,
  obtain ‚ü®t, ht, hg_zero, htŒº‚ü© := hg.exists_set_sigma_finite,
  exact ‚ü®t, ht, eventually_eq.trans (ae_restrict_of_ae hfg) hg_zero, htŒº‚ü©,
end

lemma exists_set_sigma_finite_of_ae_strongly_measurable' [decidable_pred (Œª (y : G), y ‚â† 0)]
  (hm : m ‚â§ m0) {f : Œ± ‚Üí G} (hf : ‚àÉ g, strongly_measurable g (Œº.trim hm) ‚àß f =·µê[Œº] g) :
  ‚àÉ t, measurable_set[m] t ‚àß f =·µê[Œº.restrict t·∂ú] 0 ‚àß @sigma_finite _ m ((Œº.restrict t).trim hm) :=
begin
  rcases hf with ‚ü®g, hg, hfg‚ü©,
  obtain ‚ü®t, ht, hg_zero, htŒº‚ü© := hg.exists_set_sigma_finite,
  refine ‚ü®t, ht, _, _‚ü©,
  { have hfg_eq : f =·µê[Œº.restrict t·∂ú] g, from ae_restrict_of_ae hfg,
    refine hfg_eq.trans _,
    rw restrict_trim hm Œº (@measurable_set.compl _ _ m ht) at hg_zero,
    exact measure_eq_zero_of_trim_eq_zero hm hg_zero, },
  { rwa restrict_trim hm Œº ht at htŒº, },
end

end measure_theory
