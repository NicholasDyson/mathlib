import measure_theory.integral.stokes
import analysis.complex.real_deriv

namespace complex

open topological_space set measure_theory continuous_linear_map (smul_right) metric filter function
open_locale real topological_space

variables {E : Type*} [normed_group E] [normed_space ‚ÑÇ E] [measurable_space E] [borel_space E]
  [complete_space E] [second_countable_topology E]

noncomputable def cle_real_prod : ‚ÑÇ ‚âÉL[‚Ñù] ‚Ñù √ó ‚Ñù :=
{ map_add' := Œª z w, rfl,
  map_smul' := Œª c z, by simp,
  continuous_to_fun := continuous_re.prod_mk continuous_im,
  continuous_inv_fun := by { simp only [equiv_real_prod, mk_eq_add_mul_I], continuity },
  .. equiv_real_prod }

@[simp] lemma cle_real_prod_apply (z : ‚ÑÇ) : cle_real_prod z = (z.re, z.im) := rfl
@[simp] lemma cle_real_prod_symm_apply (p : ‚Ñù √ó ‚Ñù) : cle_real_prod.symm p = ‚ü®p.1, p.2‚ü© := rfl

lemma integral_boundary_eq_zero_of_differentiable_on_rectangle_off_countable (a b : ‚ÑÇ)
  (hre : a.re ‚â§ b.re) (him : a.im ‚â§ b.im) {f : ‚ÑÇ ‚Üí E} {s : set ‚ÑÇ} (hs : countable s)
  (Hc : ‚àÄ z ‚àà s, continuous_within_at f {z : ‚ÑÇ | z.re ‚àà Icc a.re b.re ‚àß z.im ‚àà Icc a.im b.im} z)
  (hd : ‚àÄ z : ‚ÑÇ, z.re ‚àà Icc a.re b.re ‚Üí z.im ‚àà Icc a.im b.im ‚Üí z ‚àâ s ‚Üí
    differentiable_within_at ‚ÑÇ f {z : ‚ÑÇ | z.re ‚àà Icc a.re b.re ‚àß z.im ‚àà Icc a.im b.im} z) :
  (‚à´ (x : ‚Ñù) in a.re..b.re, f (x + a.im * I)) + (I ‚Ä¢ ‚à´ (y : ‚Ñù) in a.im..b.im, f (b.re + y * I)) -
    (‚à´ (x : ‚Ñù) in a.re..b.re, f (x + b.im * I)) -
    (I ‚Ä¢ ‚à´ (y : ‚Ñù) in a.im..b.im, f (a.re + y * I)) = 0 :=
begin
  simp only [‚Üê mk_eq_add_mul_I],
  set e := cle_real_prod.symm,
  set S : set ‚ÑÇ := {z : ‚ÑÇ | z.re ‚àà Icc a.re b.re ‚àß z.im ‚àà Icc a.im b.im},
  rcases ‚ü®e.surjective a, e.surjective b‚ü© with ‚ü®‚ü®a, rfl‚ü©, ‚ü®b, rfl‚ü©‚ü©,
  have hle : a ‚â§ b := ‚ü®hre, him‚ü©, clear hre him,
  have h_maps : maps_to e (Icc a b) S, from Œª p hp, ‚ü®‚ü®hp.1.1, hp.2.1‚ü©, hp.1.2, hp.2.2‚ü©,
  set F : ‚Ñù √ó ‚Ñù ‚Üí E √ó E := Œª p, (I ‚Ä¢ f (e p), -f (e p)),
  unfreezingI { obtain ‚ü®s, hs', rfl‚ü© : ‚àÉ s' : set (‚Ñù √ó ‚Ñù), countable s' ‚àß e '' s' = s,
    from ‚ü®e.symm '' s, hs.image _, e.image_symm_image s‚ü©,
    clear hs, rename hs' hs },
  replace Hc : ‚àÄ p ‚àà Icc a b ‚à© s, continuous_within_at F (Icc a b) p,
  { intros p hp,
    suffices : continuous_within_at (f ‚àò e) (Icc a b) p, from (this.const_smul _).prod this.neg,
    exact (Hc _ (mem_image_of_mem e hp.2)).comp e.continuous_within_at h_maps },
  set F' : ‚Ñù √ó ‚Ñù ‚Üí ‚Ñù √ó ‚Ñù ‚ÜíL[‚Ñù] E :=
    Œª p, (((1 : ‚ÑÇ ‚ÜíL[‚ÑÇ] ‚ÑÇ).smul_right $ deriv_within f S (e p)).restrict_scalars ‚Ñù).comp e,
  have Hd : ‚àÄ p ‚àà Icc a b \ s, has_fderiv_within_at F ((I ‚Ä¢ F' p).prod (-F' p)) (Icc a b) p,
  { intros p hp,
    suffices : has_fderiv_within_at (f ‚àò e) (F' p) (Icc a b) p,
      from (this.const_smul I).prod this.neg,
    refine ((hd _ _ _ _).has_deriv_within_at.has_fderiv_within_at.restrict_scalars ‚Ñù).comp p
      e.has_fderiv_within_at h_maps,
    exacts [(h_maps hp.1).1, (h_maps hp.1).2, mt e.injective.mem_set_image.1 hp.2] },
  have HF' : ‚àÄ p, (( (I ‚Ä¢ F' p).prod (-F' p)) (1, 0)).1 + (((I ‚Ä¢ F' p).prod (-F' p)) (0, 1)).2 = 0,
  { intro p, simp [F', mk_eq_add_mul_I] },
  have := integral_divergence_prod_of_has_fderiv_within_at_off_countable F _ hle s hs Hc Hd,
  simp only [HF', integrable_on_zero, integral_zero] at this,
  refine (eq.trans _ (this trivial).symm),
  simp only [e, cle_real_prod_symm_apply, interval_integral.integral_smul,
    interval_integral.integral_neg],
  abel
end

lemma exp_add_two_pi_I (z : ‚ÑÇ) : exp (z + 2 * œÄ * I) = exp z := by simp [exp_add_mul_I]

-- These integrals are `‚à´ f z dz/iz`
lemma integral_circle_darg_eq_of_differentiable_on_annulus_off_countable
  {r R : ‚Ñù} (h0 : 0 < r) (hle : r ‚â§ R) {f : ‚ÑÇ ‚Üí E} {s : set ‚ÑÇ} (hs : countable s)
  (hc : ‚àÄ z ‚àà s, continuous_within_at f (closed_ball 0 R \ ball 0 r) z)
  (hd : ‚àÄ z ‚àà (closed_ball 0 R \ ball 0 r) \ s,
    differentiable_within_at ‚ÑÇ f (closed_ball 0 R \ ball 0 r) z) :
  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, f (R * exp (Œ∏ * I)) = ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, f (r * exp (Œ∏ * I)) :=
begin
  set A := closed_ball (0 : ‚ÑÇ) R \ ball 0 r,
  obtain ‚ü®a, rfl‚ü© : ‚àÉ a, real.exp a = r, from ‚ü®real.log r, real.exp_log h0‚ü©,
  obtain ‚ü®b, rfl‚ü© : ‚àÉ b, real.exp b = R, from ‚ü®real.log R, real.exp_log (h0.trans_le hle)‚ü©,
  simp only [of_real_exp, ‚Üê exp_add], rw [real.exp_le_exp] at hle,
  replace hs : countable (exp ‚Åª¬π' s) := hs.preimage_cexp,
  set R := {z : ‚ÑÇ | z.re ‚àà Icc a b ‚àß z.im ‚àà Icc 0 (2 * œÄ)},
  have h_maps : maps_to exp R A,
  { rintro z ‚ü®h, -‚ü©, simpa [abs_exp] using h.symm },
  replace hc : ‚àÄ z ‚àà exp ‚Åª¬π' s, continuous_within_at (f ‚àò exp) R z,
    from Œª z hz, (hc (exp z) hz).comp continuous_within_at_id.cexp h_maps,
  replace hd : ‚àÄ z ‚àà R \ exp ‚Åª¬π' s, differentiable_within_at ‚ÑÇ (f ‚àò exp) R z,
  { intros z hz,
    exact (hd (exp z) ‚ü®h_maps hz.1, hz.2‚ü©).comp z differentiable_within_at_id.cexp h_maps  },
  simpa [exp_add_two_pi_I, sub_eq_zero, (smul_right_injective E I_ne_zero).eq_iff]
    using integral_boundary_eq_zero_of_differentiable_on_rectangle_off_countable ‚ü®a, 0‚ü© ‚ü®b, 2 * œÄ‚ü©
      hle real.two_pi_pos.le hs hc (Œª z h‚ÇÅ h‚ÇÇ h‚ÇÉ, hd z ‚ü®‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, h‚ÇÉ‚ü©),
end

lemma integral_circle_darg_of_differentiable_on_off_countable_of_tendsto
  {R : ‚Ñù} (h0 : 0 < R) {f : ‚ÑÇ ‚Üí E} {y : E} {s : set ‚ÑÇ} (hs : countable s)
  (hc : ‚àÄ z ‚àà s, continuous_within_at f (closed_ball 0 R \ {0}) z)
  (hd : ‚àÄ z ‚àà closed_ball 0 R \ {(0 : ‚ÑÇ)} \ s,
    differentiable_within_at ‚ÑÇ f (closed_ball 0 R \ {0}) z)
  (hy : tendsto f (ùìù[{0}·∂ú] 0) (ùìù y)) :
  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, f (R * exp (Œ∏ * I)) = (2 * œÄ) ‚Ä¢ y :=
begin
  rw [‚Üê sub_eq_zero, ‚Üê norm_le_zero_iff],
  refine le_of_forall_le_of_dense (Œª Œµ Œµ0, _),
  obtain ‚ü®Œ¥, Œ¥0, hŒ¥‚ü© :
    ‚àÉ Œ¥ > (0 : ‚Ñù), ‚àÄ z ‚àà closed_ball (0 : ‚ÑÇ) Œ¥ \ {0}, dist (f z) y < Œµ / (2 * œÄ),
    from ((nhds_within_has_basis nhds_basis_closed_ball _).tendsto_iff nhds_basis_ball).1 hy _
      (div_pos Œµ0 real.two_pi_pos),
  obtain ‚ü®r, hr0, hrŒ¥, hrR‚ü© : ‚àÉ r, 0 < r ‚àß r ‚â§ Œ¥ ‚àß r ‚â§ R :=
    ‚ü®min Œ¥ R, lt_min Œ¥0 h0, min_le_left _ _, min_le_right _ _‚ü©,
  have hsub : closed_ball (0 : ‚ÑÇ) R \ ball 0 r ‚äÜ closed_ball 0 R \ {(0 : ‚ÑÇ)},
    from diff_subset_diff_right (singleton_subset_iff.2 $ mem_ball_self hr0),
  have : ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, f (R * exp (Œ∏ * I)) = ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, f (r * exp (Œ∏ * I)),
  { refine integral_circle_darg_eq_of_differentiable_on_annulus_off_countable hr0 hrR hs _ _,
    exacts [Œª z hz, (hc z hz).mono hsub, Œª z hz, (hd z ‚ü®hsub hz.1, hz.2‚ü©).mono hsub] },
  rw this,
  have hmem : ‚àÄ y : ‚Ñù, ‚Üër * exp (y * I) ‚àà closed_ball (0 : ‚ÑÇ) r \ {0},
  { intro x, simp [abs_exp, abs_of_nonneg hr0.le, hr0.ne', exp_ne_zero] },
  have : ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, y = (2 * œÄ) ‚Ä¢ y := by simp,
  rw [‚Üê this, ‚Üê interval_integral.integral_sub],
  { have : ‚àÄ x : ‚Ñù, ‚à•f (r * exp (x * I)) - y‚à• ‚â§ Œµ / (2 * œÄ),
    { intro x, rw ‚Üê dist_eq_norm,
      exact (hŒ¥ _ (diff_subset_diff_left (closed_ball_subset_closed_ball hrŒ¥) (hmem x))).le },
    refine (interval_integral.norm_integral_le_of_norm_le_const (Œª x _, this x)).trans_eq _,
    simp [real.two_pi_pos.ne', _root_.abs_of_nonneg real.two_pi_pos.le] },
  { refine continuous.interval_integrable _ _ _,
    have : continuous_on f (closed_ball 0 R \ {0}),
    { intros z hz, by_cases hzs : z ‚àà s,
      exacts [hc z hzs, (hd z ‚ü®hz, hzs‚ü©).continuous_within_at] },
    refine this.comp_continuous _ _,
    { continuity },
    { exact Œª y, ‚ü®closed_ball_subset_closed_ball hrR (hmem y).1, (hmem y).2‚ü© } },
  { simp [interval_integrable, integrable_on_const, measure_lt_top] } -- TODO : add `interval_integrable_const`
end

lemma integral_circle_darg_of_differentiable_on_off_countable {R : ‚Ñù} (h0 : 0 ‚â§ R) {f : ‚ÑÇ ‚Üí E}
  {s : set ‚ÑÇ} (hs : countable s) (hc : ‚àÄ x ‚àà s, continuous_within_at f (closed_ball 0 R) x)
  (hd : ‚àÄ z ‚àà closed_ball (0 : ‚ÑÇ) R \ s, differentiable_within_at ‚ÑÇ f (closed_ball 0 R) z) :
  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, f (R * exp (Œ∏ * I)) = (2 * œÄ) ‚Ä¢ f 0 :=
begin
  rcases h0.eq_or_lt with (rfl|h0), { simp },
  refine integral_circle_darg_of_differentiable_on_off_countable_of_tendsto h0 hs
    (Œª z hz, (hc z hz).mono $ diff_subset _ _)
    (Œª z hz, (hd z ‚ü®hz.1.1, hz.2‚ü©).mono $ diff_subset _ _) _,
  suffices : continuous_within_at f (closed_ball 0 R) 0,
    from (this.continuous_at (closed_ball_mem_nhds _ h0)).continuous_within_at,
  by_cases h : (0 : ‚ÑÇ) ‚àà s,
  exacts [hc _ h, (hd _ ‚ü®mem_closed_ball_self h0.le, h‚ü©).continuous_within_at]
end

lemma integral_circle_eq_zero_of_differentiable_on_off_countable {R : ‚Ñù} (h0 : 0 ‚â§ R) {f : ‚ÑÇ ‚Üí E}
  {s : set ‚ÑÇ} (hs : countable s) (hc : ‚àÄ x ‚àà s, continuous_within_at f (closed_ball 0 R) x)
  (hd : ‚àÄ z ‚àà closed_ball (0 : ‚ÑÇ) R \ s, differentiable_within_at ‚ÑÇ f (closed_ball 0 R) z) :
  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, (R * exp (Œ∏ * I) * I : ‚ÑÇ) ‚Ä¢ f (R * exp (Œ∏ * I)) = 0 :=
by simpa [mul_smul, smul_comm _ I, interval_integral.integral_smul, I_ne_zero]
  using integral_circle_darg_of_differentiable_on_off_countable h0 hs
    (Œª z hz, continuous_within_at_id.smul (hc z hz))
    (Œª z hz, differentiable_within_at_id.smul (hd z hz))

open_locale complex_order

lemma mem_pair_of_abs_eq_of_im_eq {R : ‚Ñù} {z : ‚ÑÇ} {y : ‚Ñù} (hz : abs z = R)
  (hy : z.im = y) :
  z ‚àà ({-real.sqrt (R ^ 2 - y ^ 2) + y * I, real.sqrt (R ^ 2 - y ^ 2) + y * I} : set ‚ÑÇ) :=
begin
  cases z with x y, subst hy,
  apply_fun (Œª x, x ^ 2) at hz,
  rw [sq, mul_self_abs, norm_sq_mk, ‚Üê sq, ‚Üê sq, ‚Üê eq_sub_iff_add_eq] at hz,
  apply_fun real.sqrt at hz,
  rw real.sqrt_sq_eq_abs at hz,
  replace hz := eq_or_eq_neg_of_abs_eq hz,
  simpa only [‚Üê mk_eq_add_mul_I, ‚Üê of_real_neg, mem_insert_iff, mem_singleton_iff,
    eq_self_iff_true, and_true, or_comm] using hz
end

lemma mem_Ioo_of_abs_lt {z : ‚ÑÇ} {R : ‚Ñù} (h : abs z < R) :
  z ‚àà (Ioo (- real.sqrt (R ^ 2 - z.im ^ 2) + z.im * I)
    (real.sqrt (R ^ 2 - z.im ^ 2) + z.im * I) : set ‚ÑÇ) :=
begin
  simp only [mem_Ioo, lt_def, ‚Üê of_real_neg, ‚Üê mk_eq_add_mul_I, eq_self_iff_true, and_true,
    ‚Üê abs_lt],
  apply real.lt_sqrt_of_sq_lt,
  rwa [lt_sub_iff_add_lt, sq_abs, sq, sq, ‚Üê real.sqrt_lt_sqrt_iff, real.sqrt_sq],
  exacts [(abs_nonneg z).trans h.le, norm_sq_nonneg z]
end

lemma aux_integral {R : ‚Ñù} {w : ‚ÑÇ} (hw : abs w < R) :
  ‚à´ Œ∏ : ‚Ñù in 0..2 * œÄ, (‚ÜëR * exp (Œ∏ * I) * I / (R * exp (Œ∏ * I) - w)) = 2 ‚Ä¢ œÄ ‚Ä¢ I :=
begin
  have hR0 : 0 < R := (abs_nonneg w).trans_lt hw,
  have hwimR : w.im / R ‚àà Ioo (-1 : ‚Ñù) 1,
  { rw [mem_Ioo, ‚Üê abs_lt, _root_.abs_div, div_lt_one],
    exacts [(abs_im_le_abs _).trans_lt (hw.trans_le (le_abs_self _)),
      hR0.trans_le (le_abs_self R)] },
  set f : ‚Ñù ‚Üí ‚ÑÇ := Œª Œ∏, R * exp (Œ∏ * I) * I / (R * exp (Œ∏ * I) - w),
  have hfc : continuous f,
  { apply continuous.div,
    { -- continuity? says
      exact (continuous_const.mul ((continuous_of_real.mul continuous_const).cexp)).mul
        continuous_const },
    { -- continuity? says
      exact (continuous_const.mul ((continuous_of_real.mul continuous_const).cexp)).sub
        continuous_const },
    { intro Œ∏, rw sub_ne_zero, rintro rfl, simpa [abs_exp, (le_abs_self R).not_lt] using hw } },
  set w‚ÇÄ : ‚ÑÇ := -real.sqrt (R ^ 2 - w.im ^ 2) + w.im * I,
  set Œ∏‚ÇÄ : ‚Ñù := arg w‚ÇÄ,
  set F : ‚Ñù ‚Üí ‚ÑÇ := Œª Œ∏, log (R ‚Ä¢ exp (Œ∏ * I) - w),
  have Hd : ‚àÄ Œ∏ ‚àà Ioo (-œÄ) œÄ \ {Œ∏‚ÇÄ}, has_deriv_at F (f Œ∏) Œ∏,
  { rintro Œ∏ ‚ü®hŒ∏œÄ, hŒ∏w : Œ∏ ‚â† Œ∏‚ÇÄ‚ü©,
    convert (((of_real_clm.has_deriv_at.mul_const I).cexp_real.const_smul R).sub_const
      w).clog_real _,
    { simp [f, mul_assoc] },
    { simp only [of_real_clm_apply, Œ∏‚ÇÄ, ‚Üê sub_eq_iff_eq_add, real_smul],
      refine not_le_zero_iff.1 (Œª hle, hŒ∏w _),
      rw sub_nonpos at hle,
      have : abs (R * exp (Œ∏ * I)) = R, by simp [hR0.le, abs_exp],
      have : (R * exp (Œ∏ * I) : ‚ÑÇ) = w‚ÇÄ,
      { refine or.resolve_right (mem_pair_of_abs_eq_of_im_eq this hle.2) (Œª (H : _ = _), _),
        rw H at hle,
        exact (mem_Ioo_of_abs_lt hw).2.not_le hle },
      apply_fun arg at this,
      rwa [arg_real_mul _ hR0, exp_mul_I, arg_cos_add_sin_mul_I hŒ∏œÄ.1 hŒ∏œÄ.2.le] at this} },
/-  calc ‚à´ Œ∏ in -œÄ..œÄ, f Œ∏ = ‚à´ Œ∏ in -œÄ..Œ∏‚ÇÄ, f Œ∏ + ‚à´ Œ∏ in Œ∏‚ÇÄ..œÄ, f Œ∏ : _
  ... = -/
end

lemma integral_circle_div_sub_of_differentiable_on {R : ‚Ñù} {w : ‚ÑÇ} (hw : abs w < R)
  {f : ‚ÑÇ ‚Üí E} (hd : differentiable_on ‚ÑÇ f (closed_ball 0 R)) :
  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, ((R * exp (Œ∏ * I) * I) / (R * exp (Œ∏ * I) - w) : ‚ÑÇ) ‚Ä¢ f (R * exp (Œ∏ * I)) =
    2 ‚Ä¢ œÄ ‚Ä¢ I ‚Ä¢ f w :=
begin
  set F : ‚ÑÇ ‚Üí E := update (Œª z, (z - w)‚Åª¬π ‚Ä¢ (f z - f w)) w (deriv f w),
  set s : set ‚ÑÇ := {w},
  have hnhds : closed_ball (0 : ‚ÑÇ) R ‚àà ùìù w,
    from _root_.mem_nhds_iff.2 ‚ü®ball 0 R, ball_subset_closed_ball, is_open_ball, by simpa‚ü©,
  have hc : ‚àÄ z ‚àà s, continuous_within_at F (closed_ball 0 R) z,
  { rintro z (rfl|_),
    have := has_deriv_at_iff_tendsto_slope.1 (hd.has_deriv_at hnhds),
    rw [‚Üê continuous_within_at_diff_self, continuous_within_at],
    simp only [F, update_same],
    refine (this.congr' _).mono_left (nhds_within_mono _ (inter_subset_right _ _)),
    filter_upwards [self_mem_nhds_within] (Œª z hz, (update_noteq hz _ _).symm) },
  have hd : ‚àÄ z ‚àà closed_ball (0 : ‚ÑÇ) R \ s, differentiable_within_at ‚ÑÇ F (closed_ball 0 R) z,
  { rintro z ‚ü®hzR, hzw : z ‚â† w‚ü©,
    refine (((differentiable_within_at_id.sub_const w).inv $ sub_ne_zero.2 hzw).smul
      ((hd z hzR).sub_const (f w))).congr_of_eventually_eq _ _,
    { filter_upwards [mem_nhds_within_of_mem_nhds (is_open_ne.mem_nhds hzw)],
      exact Œª x hx, update_noteq hx _ _ },
    { exact update_noteq hzw _ _ } },
  have HI := integral_circle_eq_zero_of_differentiable_on_off_countable ((abs_nonneg w).trans hw.le)
    (countable_singleton w) hc hd,
  have hF : ‚àÄ Œ∏ : ‚Ñù, F (‚ÜëR * exp (Œ∏ * I)) = (‚ÜëR * exp (Œ∏ * I) - w)‚Åª¬π ‚Ä¢ (f (R * exp (Œ∏ * I)) - f w),
  { refine Œª Œ∏, update_noteq _ _ _,
    rintro rfl, simpa [abs_exp, (le_abs_self R).not_lt] using hw },
  simp only [hF, smul_sub, div_eq_mul_inv, mul_smul] at HI ‚ä¢,
  rw [interval_integral.integral_sub, sub_eq_zero] at HI,
  { refine HI.trans _,
    -- integral_eq_sub_of_has_deriv_at_of_le

 },
  { }
end

/-
lemma integral_circle_eq_zero_of_differentiable_on {R : ‚Ñù} (h0 : 0 ‚â§ R) {f : ‚ÑÇ ‚Üí E}
  (hd : differentiable_on ‚ÑÇ f (closed_ball 0 R)) :
  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, (R * exp (Œ∏ * I) * I : ‚ÑÇ) ‚Ä¢ f (R * exp (Œ∏ * I)) = 0 :=
by simpa [mul_smul, smul_comm _ I, interval_integral.integral_smul, I_ne_zero]
  using integral_circle_darg_of_differentiable_on h0 (differentiable_on_id.smul hd)
-/
/-
lemma integral_unit_circle_div_sub_of_differentiable_on {w : ‚ÑÇ} (h : abs w < 1)
  {f : ‚ÑÇ ‚Üí E} (hd : differentiable_on ‚ÑÇ f (closed_ball (0 : ‚ÑÇ) 1)) :
  ‚à´ (Œ∏ : ‚Ñù) in 0..2 * œÄ, ((exp (Œ∏ * I) * I) / (exp (Œ∏ * I) - w) : ‚ÑÇ) ‚Ä¢
    f (exp (Œ∏ * I)) = 2 ‚Ä¢ œÄ ‚Ä¢ I ‚Ä¢ f w :=
begin
  set R : ‚ÑÇ ‚Üí ‚ÑÇ := Œª z, (z + w) / (conj w * z + 1),
  set D := closed_ball (0 : ‚ÑÇ) 1,
  have Hdenom : ‚àÄ z ‚àà D, conj w * z + 1 ‚â† 0,
  { intros z hz h0,
    rw [mem_closed_ball_iff_norm, sub_zero, norm_eq_abs] at hz,
    have : abs (conj w * z) < 1,
    { rw [abs_mul, abs_conj, mul_comm, ‚Üê one_mul (1 : ‚Ñù)],
      exact mul_lt_mul' hz h (abs_nonneg _) zero_lt_one },
    rw [eq_neg_of_add_eq_zero h0, abs_neg, abs_one] at this,
    exact this.false },
  have Hd : ‚àÄ z ‚àà D, has_deriv_at R ((1 - w * conj w) / (conj w * z + 1) ^ 2) z,
  { intros z hz,
    have := ((has_deriv_at_id z).add_const w).div
      (((has_deriv_at_id z).const_mul (conj w)).add_const 1) (Hdenom z hz),
    simpa [add_mul, mul_comm z] using this },
  have H_norm_sq_sub :
    norm_sq (conj w * z + 1) - norm_sq (z + w) = (1 - norm_sq z) * (1 - norm_sq w),
  { simp, },
  have Hmaps : maps_to R D D,
  { intros z hz,
    simp only [mem_closed_ball, abs_div, dist_zero_right, norm_eq_abs] at hz ‚ä¢,
    refine div_le_one_of_le (real.sqrt_le_sqrt _) (abs_nonneg _),
    rw [norm_sq_add, norm_sq_add, norm_sq.map_mul, norm_sq_conj, norm_sq.map_one, conj_one, mul_one,
      mul_comm z, ‚Üê sub_nonneg],
    convert_to 0 ‚â§ (1 - norm_sq z) * (1 - norm_sq w), { abel },
     }
  
end
-/
end complex

